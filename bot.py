import logging
import os
import base64
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# GeliÅŸmiÅŸ loglamayÄ± etkinleÅŸtir (Hata ayÄ±klama iÃ§in yararlÄ±)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot Token'Ä±nÄ± ortam deÄŸiÅŸkeninden al (Railway iÃ§in gereklidir)
# Railway'de "Variables" kÄ±smÄ±na TELEGRAM_TOKEN olarak eklemelisiniz.
TOKEN = "8280902341:AAEQvYIlhpBfcI8X6KviiWkzIck-leeoqHU"

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN ortam deÄŸiÅŸkeni ayarlanmamÄ±ÅŸ!")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start komutu verildiÄŸinde bir karÅŸÄ±lama mesajÄ± gÃ¶nderir."""
    await update.message.reply_html(
        "Merhaba! ğŸ‘‹\n\n"
        "Bana bir fotoÄŸraf gÃ¶nderin, onu anÄ±nda tek bir HTML dosyasÄ±na dÃ¶nÃ¼ÅŸtÃ¼reyim. "
        "OluÅŸturulan HTML dosyasÄ±, gÃ¶rseli Base64 formatÄ±nda iÃ§inde barÄ±ndÄ±rÄ±r."
    )

def create_html_content(image_bytes: bytes, mime_type: str) -> str:
    """GÃ¶rsel byte'larÄ±nÄ± Base64'e Ã§evirir ve tam bir HTML sayfasÄ± oluÅŸturur."""
    
    # GÃ¶rseli Base64 string formatÄ±na Ã§evir
    base64_string = base64.b64encode(image_bytes).decode('utf-8')
    
    # Veri URI'sini oluÅŸtur
    data_uri = f"data:{mime_type};base64,{base64_string}"
    
    # Tamamen kendi iÃ§inde yeterli (self-contained) bir HTML dosyasÄ± oluÅŸtur
    html_content = f"""
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GÃ¶rsel HTML'e GÃ¶mÃ¼ldÃ¼</title>
    <style>
        /* Sayfa kenar boÅŸluklarÄ±nÄ± sÄ±fÄ±rla */
        body, html {{
            margin: 0;
            padding: 0;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #2e2e2e; /* Arka plan rengi */
        }}
        
        /* GÃ¶rselin maksimum geniÅŸlikte ve yÃ¼kseklikte olmasÄ±nÄ± saÄŸla */
        img {{
            max-width: 100%;
            max-height: 100vh; /* Ekran yÃ¼ksekliÄŸini geÃ§mesin */
            height: auto;
            display: block;
            border-radius: 8px; /* Hafif kÃ¶ÅŸelik */
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3); /* GÃ¶ze hoÅŸ gelen gÃ¶lge */
        }}
    </style>
</head>
<body>
    <!-- GÃ¶rseli Base64 URI olarak buraya gÃ¶m -->
    <img src="{data_uri}" alt="YÃ¼klenen GÃ¶rsel">
</body>
</html>
"""
    return html_content

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """KullanÄ±cÄ± bir fotoÄŸraf gÃ¶nderdiÄŸinde Ã§alÄ±ÅŸÄ±r."""
    message = update.message
    
    # KullanÄ±cÄ±ya iÅŸlem yapÄ±ldÄ±ÄŸÄ±nÄ± bildiren bir mesaj gÃ¶nder
    processing_message = await message.reply_text("GÃ¶rsel iÅŸleniyor, lÃ¼tfen bekleyin...")

    try:
        # Telegram'da fotoÄŸraflar farklÄ± Ã§Ã¶zÃ¼nÃ¼rlÃ¼klerde gelir.
        # En yÃ¼ksek Ã§Ã¶zÃ¼nÃ¼rlÃ¼klÃ¼ olanÄ± (-1) seÃ§iyoruz.
        photo_file = await message.photo[-1].get_file()
        
        # FotoÄŸrafÄ± byte olarak indiriyoruz
        file_bytes_io = await photo_file.download_as_bytearray()
        image_bytes = bytes(file_bytes_io)
        
        # Telegram'dan "photo" olarak gelen gÃ¶rseller genellikle JPEG formatÄ±ndadÄ±r.
        # EÄŸer "document" olarak gelseydi mime_type'Ä± kontrol etmek gerekirdi.
        mime_type = "image/jpeg"
        
        # HTML iÃ§eriÄŸini oluÅŸtur
        html_string = create_html_content(image_bytes, mime_type)
        
        # HTML iÃ§eriÄŸini byte'a dÃ¶nÃ¼ÅŸtÃ¼r
        html_bytes = html_string.encode('utf-8')
        
        # "Ä°ÅŸleniyor" mesajÄ±nÄ± sil
        await context.bot.delete_message(chat_id=message.chat_id, message_id=processing_message.message_id)

        # OluÅŸturulan HTML'i bir dosya olarak gÃ¶nder
        await message.reply_document(
            document=html_bytes,
            filename="gorsel.html",
            caption="Ä°ÅŸte gÃ¶rseliniz HTML dosyasÄ±na gÃ¶mÃ¼ldÃ¼!"
        )

    except Exception as e:
        logger.error(f"Hata oluÅŸtu: {e}", exc_info=True)
        # "Ä°ÅŸleniyor" mesajÄ±nÄ± sil (eÄŸer hala varsa)
        try:
            await context.bot.delete_message(chat_id=message.chat_id, message_id=processing_message.message_id)
        except:
            pass # Mesaj zaten silinmiÅŸse veya baÅŸka bir hata olursa
            
        await message.reply_text("Maalesef bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.")

def main() -> None:
    """Botu baÅŸlatÄ±r."""
    
    # Application nesnesini oluÅŸtur
    application = Application.builder().token(TOKEN).build()

    # KomutlarÄ± ekle
    application.add_handler(CommandHandler("start", start))

    # FotoÄŸraf mesajlarÄ±nÄ± iÅŸleyecek handler'Ä± ekle
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))

    # Botu polling (sÃ¼rekli sorgulama) moduyla baÅŸlat
    # Railway'de bu 'worker' olarak Ã§alÄ±ÅŸacaktÄ±r.
    logger.info("Bot baÅŸlatÄ±lÄ±yor...")
    application.run_polling()

if __name__ == "__main__":
    main()
